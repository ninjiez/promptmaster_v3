// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionTier {
  FREE
  SKEPTIC
  KIDDO
  ENGINEER
  GOD
}

enum PromptStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum TransactionType {
  PURCHASE
  USAGE
  BONUS
  REFUND
}

enum PromptType {
  SYSTEM_USER
  DIRECT
}

enum FeedbackType {
  VOTE
  DETAILED
}

// Core Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  tokenBalance      Int       @default(1500) // 1500 free tokens on signup
  subscriptionTier  SubscriptionTier @default(FREE)
  stripeCustomerId  String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  prompts          Prompt[]
  tokenTransactions TokenTransaction[]
  subscriptions    Subscription[]
  feedback         Feedback[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Prompt {
  id          String       @id @default(cuid())
  title       String
  description String?
  promptType  PromptType   @default(SYSTEM_USER)
  status      PromptStatus @default(DRAFT)
  category    String?
  subcategory String?
  isPublic    Boolean      @default(false)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions PromptVersion[]
  tests    TestResult[]
  feedback Feedback[]

  @@map("prompts")
}

model PromptVersion {
  id            String   @id @default(cuid())
  promptId      String
  version       String   // V1, V2, V3, etc.
  content       String   @db.Text
  systemPrompt  String?  @db.Text
  userPrompt    String?  @db.Text
  isActive      Boolean  @default(false)
  tokensCost    Int      @default(0)
  createdAt     DateTime @default(now())
  
  // Relations
  prompt      Prompt       @relation(fields: [promptId], references: [id], onDelete: Cascade)
  testResults TestResult[]
  questions   Question[]
  examples    Example[]
  feedback    Feedback[]

  @@unique([promptId, version])
  @@map("prompt_versions")
}

model TestResult {
  id              String   @id @default(cuid())
  promptId        String
  promptVersionId String?
  testInput       String   @db.Text
  testOutput      String   @db.Text
  executionTime   Int?     // milliseconds
  tokensUsed      Int?
  success         Boolean  @default(true)
  errorMessage    String?
  createdAt       DateTime @default(now())

  // Relations
  prompt        Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptVersion PromptVersion? @relation(fields: [promptVersionId], references: [id], onDelete: SetNull)

  @@map("test_results")
}

model Question {
  id              String   @id @default(cuid())
  promptVersionId String
  questionText    String   @db.Text
  category        String
  priority        String
  explanation     String?  @db.Text
  answer          String?  @db.Text
  isAnswered      Boolean  @default(false)
  order           Int      @default(0)
  createdAt       DateTime @default(now())

  // Relations
  promptVersion PromptVersion @relation(fields: [promptVersionId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Example {
  id              String   @id @default(cuid())
  promptVersionId String
  title           String
  input           String   @db.Text
  expectedOutput  String?  @db.Text
  reasoningProcess String? @db.Text
  exampleType     String   // "ideal", "edge", "complex", etc.
  isApproved      Boolean  @default(false)
  order           Int      @default(0)
  createdAt       DateTime @default(now())

  // Relations
  promptVersion PromptVersion @relation(fields: [promptVersionId], references: [id], onDelete: Cascade)

  @@map("examples")
}

model Feedback {
  id              String       @id @default(cuid())
  promptId        String
  promptVersionId String?
  userId          String
  feedbackType    FeedbackType
  rating          Int?         // 1-5 or thumbs up/down (-1, 1)
  content         String?      @db.Text
  betterVersionId String?      // Which version was voted as better
  createdAt       DateTime     @default(now())

  // Relations
  prompt        Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptVersion PromptVersion? @relation(fields: [promptVersionId], references: [id], onDelete: SetNull)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

model Subscription {
  id                String           @id @default(cuid())
  userId            String
  stripeSubscriptionId String        @unique
  stripePriceId     String
  tier              SubscriptionTier
  status            String           // active, canceled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean         @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model TokenTransaction {
  id            String          @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int             // positive for additions, negative for usage
  description   String?
  reference     String?         // stripe payment intent, prompt id, etc.
  balanceBefore Int
  balanceAfter  Int
  createdAt     DateTime        @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_transactions")
}

// Analytics and System Models
model ApiUsage {
  id           String   @id @default(cuid())
  userId       String?
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int      // milliseconds
  tokensUsed   Int?
  createdAt    DateTime @default(now())

  @@map("api_usage")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
  updatedAt DateTime @updatedAt

  @@map("system_config")
}